openapi: '3.0.1'
info:
  title: 'ai-backend'
  version: '1.0'
servers:
  - url: 'https://uzfy92f1x6.execute-api.ap-northeast-1.amazonaws.com/{basePath}'
    variables:
      basePath:
        default: '/Prod'
paths:
  /api/status:
    post:
      x-amazon-apigateway-integration:
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:528163014577:function:ai-backend-GetStatusFunction-rlMI1PoWYB5n/invocations'
        passthroughBehavior: 'when_no_match'
        type: 'aws_proxy'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /api:
    post:
      responses:
        '400':
          description: '400 response'
          content: {}
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content: {}
      x-amazon-apigateway-integration:
        credentials: 'arn:aws:iam::528163014577:role/ai-backend-AIStateMachineApiEventRole-11E4OMYHCUN7Q'
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:ap-northeast-1:states:action/StartExecution'
        responses:
          '200':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '400':
            statusCode: '400'
        requestTemplates:
          application/json:
            "{\"input\": \"$util.escapeJavaScript($input.json('$'))\"\
            , \"stateMachineArn\": \"arn:aws:states:ap-northeast-1:528163014577:stateMachine:AIStateMachine-HIkNgzcVGphv\"\
            }"
        passthroughBehavior: 'when_no_match'
        type: 'aws'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        passthroughBehavior: 'when_no_match'
        type: 'mock'
components: {}
